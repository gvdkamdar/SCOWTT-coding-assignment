// Prisma models for NextAuth v5 with Prisma adapter

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth core tables

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // NextAuth relations
  accounts Account[]
  sessions Session[]

  // App fields
  favoriteMovieId String?
  favoriteMovie   Movie?  @relation(fields: [favoriteMovieId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Movie {
  id              String      @id @default(cuid())
  title           String
  normalizedTitle String
  year            Int?
  createdAt       DateTime    @default(now())
  facts           MovieFact[]

  // Back relation for users who favorited this movie
  favoritedBy User[]

  @@unique([normalizedTitle, year], name: "normalizedTitle_year")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model MovieFact {
  id           String   @id @default(cuid())
  movieId      String
  factText     String
  factKey      String?
  factCategory String?
  createdAt    DateTime @default(now())

  movie Movie @relation(fields: [movieId], references: [id], onDelete: Cascade)

  @@unique([movieId, factKey], map: "uniq_movie_fact_key")
  @@index([movieId, factKey])
  @@index([movieId, factCategory])
}
